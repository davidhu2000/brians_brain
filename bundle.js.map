{"version":3,"sources":["webpack:///webpack/bootstrap c33dedab4815959f3c7d","webpack:///./assets/javascripts/simulation_view.js","webpack:///./assets/javascripts/simulation.js","webpack:///./assets/javascripts/grid.js"],"names":["boardSize","gridSize","$","document","ready","stage","createjs","Stage","grid","generateGrid","simulation","squares","states","getElementById","addEventListener","play","stop","reset","e","keyCode","Ticker","setPaused","getPaused","setFPS","tick","event","updateBoard","update","change","applyPreset","target","value","window","sqs","Simulation","deltas","presets","twinEyes","theSpaceship","boomerang","diamond","clearBoard","bind","pos","neighbors","split","posX","parseInt","posY","nX","nY","forEach","delta","push","ids","filter","id","state","length","sq","neighborsIds","findNeighborIds","numOns","countNumberOfOns","squaresDup","JSON","parse","stringify","Object","keys","nextState","color","graphics","clear","beginStroke","setStrokeStyle","snapToPixel","beginFill","drawRect","updateSquareColor","updateAllStates","updateAllSquareColors","emptyBoard","values","every","s","presetName","preset","Grid","handleClick","square","numSq","r","c","Shape","x","y","addChild","changeGridColor","currentSq","currentState"],"mappings":"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","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c33dedab4815959f3c7d","/* global createjs */\n\nimport Simulation from './simulation';\nimport Grid from './grid';\n\nlet boardSize = 600;\nlet gridSize = 10;\n\n$(document).ready( () => {\n  let stage = new createjs.Stage(\"simCanvas\");\n  let grid = new Grid(stage, boardSize, gridSize);\n  grid.generateGrid();\n  let simulation = new Simulation(stage, grid.squares, grid.states, gridSize, boardSize);\n\n  document.getElementById('play-button').addEventListener('click', () => simulation.play() );\n  document.getElementById('stop-button').addEventListener('click', () => simulation.stop() );\n  document.getElementById('reset-button').addEventListener('click', () => simulation.reset() );\n\n  document.addEventListener('keypress', (e) => {\n\n    if(e.keyCode === 32) {\n      createjs.Ticker.setPaused(\n        !createjs.Ticker.getPaused()\n      );\n    }\n\n    if(e.keyCode === 114) {\n      simulation.reset();\n    }\n  });\n\n  createjs.Ticker.setFPS(30);\n\n  function tick(event) {\n    if(createjs.Ticker.getPaused()) {\n      simulation.updateBoard();\n      stage.update(event);\n    }\n  }\n\n  createjs.Ticker.addEventListener(\"tick\", tick);\n\n  $('#preset-selector').change( (e) => {\n    simulation.applyPreset(e.target.value);\n  });\n\n  window.grid = grid;\n  window.stage = stage;\n  window.simulation = simulation;\n  window.sqs = grid.squares;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./assets/javascripts/simulation_view.js","/* global createjs */\n\nclass Simulation {\n\n  constructor(stage, squares, states, gridSize, boardSize) {\n    this.squares = squares;\n    this.states = states;\n    this.stage = stage;\n    this.boardSize = boardSize;\n    this.gridSize = gridSize;\n    this.deltas = [\n      [ 0, -1], [ 1, -1], [ 1,  0], [ 1,  1],\n      [ 0,  1], [-1,  1], [-1,  0], [-1, -1]\n    ];\n\n    this.presets = {\n      twinEyes: ['290_270', '300_270'],\n      theSpaceship: ['300_550', '310_550'],\n      boomerang: ['300_290', '300_320', '310_290', '310_320'],\n      diamond: ['290_270', '300_270', '290_280', '300_280']\n    };\n\n    this.clearBoard = this.clearBoard.bind(this);\n  }\n\n  findNeighborIds(pos) {\n    let neighbors = [];\n    pos = pos.split('_');\n    let posX = parseInt(pos[0]);\n    let posY = parseInt(pos[1]);\n\n    let nX;\n    let nY;\n\n    this.deltas.forEach( delta => {\n      nX = this.gridSize * delta[0] + posX;\n      nY = this.gridSize * delta[1] + posY;\n\n      if(nX >= 0 && nY >= 0 && nX < this.boardSize && nY < this.boardSize) {\n        neighbors.push(nX + '_' + nY );\n      }\n    });\n\n    return neighbors;\n  }\n\n  countNumberOfOns(ids) {\n    return ids.filter( id => {\n      return this.states[id].state === 'on';\n    }).length;\n  }\n\n  nextState(sq) {\n    // console.log(sq);\n    if(sq.state === 'on') {\n      sq.state = 'dying';\n    } else if(sq.state === 'dying') {\n      sq.state = 'off';\n    } else {\n      let neighborsIds = this.findNeighborIds(sq.pos);\n      let numOns = this.countNumberOfOns(neighborsIds);\n      if(numOns === 2) {\n        sq.state = 'on';\n      }\n    }\n  }\n\n  updateAllStates() {\n    // console.log('update');\n    // performance.mark('begin-deep-clone');\n    let squaresDup = JSON.parse(JSON.stringify(this.states));\n    // performance.mark('end-deep-clone');\n\n    // performance.mark('begin-next-state');\n    Object.keys(this.states).forEach( id => this.nextState(squaresDup[id]) );\n    // performance.mark('end-next-state');\n\n    // performance.mark('begin-next-state-update');\n    Object.keys(this.squares).forEach( id => {\n      this.states[id].state = squaresDup[id].state;\n    });\n    // performance.mark('end-next-state-update');\n\n    // performance.measure('deepClone', 'begin-deep-clone', 'end-deep-clone');\n    //\n    // let deepClone = performance.getEntriesByName('deepClone');\n    //\n    // let avgClone = deepClone.reduce( (total, measure) => {\n    //   return total + measure.duration;\n    // }, 0) / deepClone.length;\n    //\n    // performance.measure('nextState', 'begin-next-state', 'end-next-state');\n    //\n    // let nextState = performance.getEntriesByName('nextState');\n    //\n    // let avgState = nextState.reduce( (total, measure) => {\n    //   return total + measure.duration;\n    // }, 0) / nextState.length;\n    //\n    // performance.measure('nextUpdate', 'begin-next-state-update', 'end-next-state-update');\n    //\n    // let nextUpdate = performance.getEntriesByName('nextUpdate');\n    //\n    // let avgUpdate = nextUpdate.reduce( (total, measure) => {\n    //   return total + measure.duration;\n    // }, 0) / nextUpdate.length;\n    //\n    // console.log('Avg clone Change: ', avgClone, 'ms');\n    // console.log('Avg state Change: ', avgState, 'ms');\n    // console.log('Avg update Change: ', avgUpdate, 'ms');\n\n\n  }\n\n  updateSquareColor(id) {\n    let state = this.states[id].state;\n    let sq = this.squares[id];\n\n    let color;\n    if(state === 'off') {\n      color = '#000';\n    } else if(state === 'dying'){\n      color = 'red';\n    } else {\n      color = '#fff';\n    }\n    sq.graphics.clear();\n    sq.graphics.beginStroke('#333');\n    sq.graphics.setStrokeStyle(1);\n    sq.snapToPixel = true;\n    sq.graphics.beginFill(color);\n\n    sq.graphics.drawRect(0, 0, this.gridSize, this.gridSize);\n  }\n\n  updateAllSquareColors() {\n    Object.keys(this.squares).forEach( id => this.updateSquareColor(id) );\n  }\n\n  updateBoard() {\n    // performance.mark('begin-state-change');\n    this.updateAllStates();\n    // performance.mark('end-state-change');\n\n    // performance.mark('start-color-change');\n    this.updateAllSquareColors();\n    // performance.mark('end-color-change');\n\n    this.stage.update();\n\n    // performance.measure('stateChange', 'begin-state-change', 'end-state-change');\n    // performance.measure('colorChange', 'start-color-change', 'end-color-change');\n    //\n    // let stateChange = performance.getEntriesByName('stateChange');\n    // let colorChange = performance.getEntriesByName('colorChange');\n    //\n    // let avgState = stateChange.reduce( (total, measure) => {\n    //   return total + measure.duration;\n    // }, 0) / stateChange.length;\n    //\n    // let avgColor = colorChange.reduce( (total, measure) => {\n    //   return total + measure.duration;\n    // }, 0) / colorChange.length;\n    //\n    // avgState = Math.round(avgState * 1000) / 1000;\n    // avgColor = Math.round(avgColor * 1000) / 1000;\n    //\n    // console.log('Avg State Change: ', avgState, 'ms');\n    // console.log('Avg Color Change: ', avgColor, 'ms');\n    if(this.emptyBoard()) {\n      this.stop();\n    }\n  }\n\n  clearBoard() {\n    Object.keys(this.states).forEach( id => {\n      this.states[id].state = 'off';\n    });\n    this.updateBoard();\n  }\n\n  play() {\n    createjs.Ticker.setPaused(true);\n  }\n\n  stop() {\n    createjs.Ticker.setPaused(false);\n  }\n\n  reset() {\n    this.clearBoard();\n    this.stop();\n  }\n\n  emptyBoard() {\n    return Object.values(this.states).every( s => s.state === 'off');\n  }\n\n  applyPreset(presetName) {\n    this.reset();\n    let preset = this.presets[presetName];\n    preset.forEach( id => {\n      this.states[id].state = 'on';\n      this.updateSquareColor(id);\n    });\n\n    this.stage.update();\n  }\n}\n\nexport default Simulation;\n\n\n\n// WEBPACK FOOTER //\n// ./assets/javascripts/simulation.js","/* global createjs */\n\nclass Grid {\n  constructor(stage, boardSize, gridSize) {\n    this.stage = stage;\n    this.squares = {};\n    this.states = {};\n    this.boardSize = boardSize;\n    this.gridSize = gridSize;\n\n    this.handleClick = this.handleClick.bind(this);\n    this.clearBoard = this.clearBoard.bind(this);\n  }\n\n  generateGrid() {\n    let square;\n\n    let numSq = this.boardSize / this.gridSize;\n\n    for(let r = 0; r < numSq; r++) {\n      for(let c = 0; c < numSq; c++) {\n        square = new createjs.Shape();\n\n        square.graphics.beginStroke('#333');\n        square.graphics.setStrokeStyle(1);\n        square.snapToPixel = true;\n        square.graphics.beginFill('#000');\n\n        square.graphics.drawRect(0, 0, this.gridSize, this.gridSize);\n        square.x = this.gridSize * c;\n        square.y = this.gridSize * r;\n        square.addEventListener(\"click\", this.handleClick);\n\n        this.stage.addChild(square);\n\n        let id = square.x + \"_\" + square.y;\n        this.squares[id] = square;\n\n        this.states[id] = {\n          state: 'off',\n          pos: id\n        };\n      }\n    }\n    this.stage.update();\n  }\n\n  handleClick(e) {\n    this.changeGridColor(e);\n    this.stage.update();\n  }\n\n  changeGridColor(e) {\n    let id = e.target.x + \"_\" + e.target.y;\n    let currentSq = this.squares[id];\n    let currentState = this.states[id];\n    let color;\n\n    if(currentState.state === 'off') {\n      color = '#fff';\n      currentState.state = 'on';\n    } else {\n      color = '#000';\n      currentState.state = 'off';\n    }\n\n    currentSq.graphics.beginFill(color).drawRect(0, 0, this.gridSize, this.gridSize);\n  }\n\n  clearBoard() {\n    this.stage.clear();\n    this.generateGrid();\n  }\n}\n\nexport default Grid;\n\n\n\n// WEBPACK FOOTER //\n// ./assets/javascripts/grid.js"],"sourceRoot":""}